#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void delay()
{
    int a, i;
    for(i=0; i<2000; i++)
    {
        a = 1000*(a/1);
    }
}

void swap(int *a, int *b)
{
    int temp = *a;
    *a = *b;
    *b = temp;
}

void heapify(int arr[], int n, int i)
{
    delay();
    int largest = i;
    int left = 2*i +1;
    int right = 2*i + 2;
    if(left<n && arr[left]>arr[largest])
    {
        largest = left;
    }
    if(right<n && arr[right]>arr[largest])
    {
        largest = right;
    }
    
    if(largest != i)
    {
        swap(&arr[i], &arr[largest]);
        heapify(arr, n, largest);
    }
}

void heapsort(int arr[], int n)
{
    int i;
    for(i = (n/2)-1; i>=0; i--)
    {
        heapify(arr, n, i);
    }
    for(i=n-1; i>=0; i--)
    {
        swap(&arr[0], &arr[i]);
        heapify(arr, i, 0);
    }
}

void printarr(int arr[], int n)
{
    for(int i=0; i<n; i++)
    {
        printf("%d\t", arr[i]);
    }
    printf("\n");
}

int main()
{
    clock_t start, end;
    int n;
    printf("enter the number of elements in the array:\n");
    scanf("%d", &n);
    int arr[n];
    for(int i=0; i<n; i++)
    {
        arr[i] = rand()%10;
    }
    printf("array before sorting:\n");
    printarr(arr, n );
    printf("array after sorting:\n");
    start = clock();
    heapsort(arr, n);
    end = clock();
    printarr(arr, n);
    printf("time taken for execution is %f", (double)(end-start)/CLOCKS_PER_SEC);
    return 0;
}
